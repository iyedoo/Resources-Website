import{_ as i,c as a,o as n,ah as e}from"./chunks/framework.B49HbWsY.js";const o=JSON.parse('{"title":"Genie","description":"","frontmatter":{},"headers":[],"relativePath":"editorials/IncaTestSeptember2025/genie.md","filePath":"editorials/IncaTestSeptember2025/genie.md"}'),t={name:"editorials/IncaTestSeptember2025/genie.md"};function l(h,s,p,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="genie" tabindex="-1">Genie <a class="header-anchor" href="#genie" aria-label="Permalink to &quot;Genie&quot;">​</a></h1><p>Written by Fatima Amrat</p><h2 id="problem-statement" tabindex="-1">Problem Statement: <a class="header-anchor" href="#problem-statement" aria-label="Permalink to &quot;Problem Statement:&quot;">​</a></h2><ul><li><a href="statements/genie_en.pdf">English</a></li><li><a href="statements/genie_fr.pdf">French</a></li><li><a href="statements/genie_ar.pdf">Arabic</a></li><li><a href="statements/genie_dz.pdf">Arabic (Algeria)</a></li></ul><h2 id="key-idea" tabindex="-1">Key Idea: <a class="header-anchor" href="#key-idea" aria-label="Permalink to &quot;Key Idea:&quot;">​</a></h2><p>Let <code>S</code> be the current sum of the drawn cards.<br> Define <code>d = 21 - S</code>, which represents the maximum card value you can still draw without exceeding 21.</p><ul><li>If the next card has value <code>≤ d</code>, it is safe → draw (<code>VUCI</code>).</li><li>If the next card has value <code>&gt; d</code>, it is dangerous → stop (<code>DOSTA</code>).</li></ul><h2 id="proof" tabindex="-1">Proof: <a class="header-anchor" href="#proof" aria-label="Permalink to &quot;Proof:&quot;">​</a></h2><p>We want to show that the strategy can be reduced to a single condition.<br> There are 10 possible card values: {2..9, 10, 11}, each appearing 4 times.</p><ul><li>Safe cards = 4 × (d - 1).</li><li>Dangerous cards = 4 × (11 - d).</li></ul><p>The condition <code>dangerous ≥ safe</code> simplifies to:<br> 11 - d ≥ d - 1 → d ≤ 6 → S ≥ 15.</p><p>Therefore, the threshold occurs when S = 14:</p><ul><li>If S ≤ 13 → safe &gt; dangerous → output <code>VUCI</code>.</li><li>If S ≥ 14 → dangerous ≥ safe → output <code>DOSTA</code>.</li></ul><h2 id="implementation" tabindex="-1">Implementation: <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation:&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;bits/stdc++.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">using </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n , sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;int&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n) ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n ; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers[i] ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers[i] ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;VUCI</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;DOSTA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,15)])])}const c=i(t,[["render",l]]);export{o as __pageData,c as default};
